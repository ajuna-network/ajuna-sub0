//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace HelloKusama.NetApiExt.Generated.Storage
{
    
    
    public sealed class ParasDisputesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public ParasDisputesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParasDisputes", "LastPrunedSession"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParasDisputes", "Disputes"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash>), typeof(HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParasDisputes", "Included"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash>), typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParasDisputes", "SpamSlots"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("ParasDisputes", "Frozen"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>)));
        }
        
        /// <summary>
        /// >> LastPrunedSessionParams
        ///  The last pruned session, if any. All data stored by this module
        ///  references sessions.
        /// </summary>
        public static string LastPrunedSessionParams()
        {
            return RequestGenerator.GetStorage("ParasDisputes", "LastPrunedSession", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastPrunedSession
        ///  The last pruned session, if any. All data stored by this module
        ///  references sessions.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> LastPrunedSession(CancellationToken token)
        {
            string parameters = ParasDisputesStorage.LastPrunedSessionParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> DisputesParams
        ///  All ongoing or concluded disputes for the last several sessions.
        /// </summary>
        public static string DisputesParams(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
        {
            return RequestGenerator.GetStorage("ParasDisputes", "Disputes", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> Disputes
        ///  All ongoing or concluded disputes for the last several sessions.
        /// </summary>
        public async Task<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState> Disputes(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key, CancellationToken token)
        {
            string parameters = ParasDisputesStorage.DisputesParams(key);
            return await _client.GetStorageAsync<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState>(parameters, token);
        }
        
        /// <summary>
        /// >> IncludedParams
        ///  All included blocks on the chain, as well as the block number in this chain that
        ///  should be reverted back to if the candidate is disputed and determined to be invalid.
        /// </summary>
        public static string IncludedParams(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key)
        {
            return RequestGenerator.GetStorage("ParasDisputes", "Included", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> Included
        ///  All included blocks on the chain, as well as the block number in this chain that
        ///  should be reverted back to if the candidate is disputed and determined to be invalid.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> Included(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash> key, CancellationToken token)
        {
            string parameters = ParasDisputesStorage.IncludedParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> SpamSlotsParams
        ///  Maps session indices to a vector indicating the number of potentially-spam disputes
        ///  each validator is participating in. Potentially-spam disputes are remote disputes which have
        ///  fewer than `byzantine_threshold + 1` validators.
        /// 
        ///  The i'th entry of the vector corresponds to the i'th validator in the session.
        /// </summary>
        public static string SpamSlotsParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("ParasDisputes", "SpamSlots", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SpamSlots
        ///  Maps session indices to a vector indicating the number of potentially-spam disputes
        ///  each validator is participating in. Potentially-spam disputes are remote disputes which have
        ///  fewer than `byzantine_threshold + 1` validators.
        /// 
        ///  The i'th entry of the vector corresponds to the i'th validator in the session.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>> SpamSlots(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = ParasDisputesStorage.SpamSlotsParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
        
        /// <summary>
        /// >> FrozenParams
        ///  Whether the chain is frozen. Starts as `None`. When this is `Some`,
        ///  the chain will not accept any new parachain blocks for backing or inclusion,
        ///  and its value indicates the last valid block number in the chain.
        ///  It can only be set back to `None` by governance intervention.
        /// </summary>
        public static string FrozenParams()
        {
            return RequestGenerator.GetStorage("ParasDisputes", "Frozen", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Frozen
        ///  Whether the chain is frozen. Starts as `None`. When this is `Some`,
        ///  the chain will not accept any new parachain blocks for backing or inclusion,
        ///  and its value indicates the last valid block number in the chain.
        ///  It can only be set back to `None` by governance intervention.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>> Frozen(CancellationToken token)
        {
            string parameters = ParasDisputesStorage.FrozenParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
    }
    
    public sealed class ParasDisputesCalls
    {
        
        /// <summary>
        /// >> force_unfreeze
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceUnfreeze()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(62, "ParasDisputes", 0, "force_unfreeze", byteArray.ToArray());
        }
    }
    
    public enum ParasDisputesErrors
    {
        
        /// <summary>
        /// >> DuplicateDisputeStatementSets
        /// Duplicate dispute statement sets provided.
        /// </summary>
        DuplicateDisputeStatementSets,
        
        /// <summary>
        /// >> AncientDisputeStatement
        /// Ancient dispute statement provided.
        /// </summary>
        AncientDisputeStatement,
        
        /// <summary>
        /// >> ValidatorIndexOutOfBounds
        /// Validator index on statement is out of bounds for session.
        /// </summary>
        ValidatorIndexOutOfBounds,
        
        /// <summary>
        /// >> InvalidSignature
        /// Invalid signature on statement.
        /// </summary>
        InvalidSignature,
        
        /// <summary>
        /// >> DuplicateStatement
        /// Validator vote submitted more than once to dispute.
        /// </summary>
        DuplicateStatement,
        
        /// <summary>
        /// >> PotentialSpam
        /// Too many spam slots used by some specific validator.
        /// </summary>
        PotentialSpam,
        
        /// <summary>
        /// >> SingleSidedDispute
        /// A dispute where there are only votes on one side.
        /// </summary>
        SingleSidedDispute,
    }
}
