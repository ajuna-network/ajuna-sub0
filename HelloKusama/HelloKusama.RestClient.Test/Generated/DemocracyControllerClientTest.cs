//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HelloKusama.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using HelloKusama.RestClient.Mockup.Generated.Clients;
   using HelloKusama.RestClient.Generated.Clients;
   using Ajuna.NetApi.Model.Types.Primitive;
   using HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec;
   using Ajuna.NetApi.Model.Types.Base;
   using HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types;
   using HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote;
   using HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages;
   using HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold;
   
   public class DemocracyControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPublicPropCount()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribePublicPropCount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPublicPropCount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetPublicPropCount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT9 GetTestValue3()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT9 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT9();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>[] {
                  this.GetTestValue4()});
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> GetTestValue4()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>();
         result.Create(this.GetTestValueU32(), this.GetTestValue5(), this.GetTestValue7());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded GetTestValue5()
      {
         HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded result;
         result = new HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded();
         result.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.Bounded>(), this.GetTestValue6());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue6()
      {
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new HelloKusama.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue7()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestPublicProps()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT9 mockupValue = this.GetTestValue3();


         Assert.IsTrue(await rpcClient.SubscribePublicProps());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetPublicProps(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT9 rpcResult = await rpcClient.GetPublicProps();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10, Ajuna.NetApi.Model.Types.Primitive.U128> GetTestValue9()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10, Ajuna.NetApi.Model.Types.Primitive.U128> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10, Ajuna.NetApi.Model.Types.Primitive.U128>();
         result.Create(this.GetTestValue10(), this.GetTestValueU128());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10 GetTestValue10()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>();
         result.Value.Create(new HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32[] {
                  this.GetTestValue11()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue11()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestDepositOf()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10, Ajuna.NetApi.Model.Types.Primitive.U128> mockupValue = this.GetTestValue9();
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeDepositOf(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetDepositOf(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10, Ajuna.NetApi.Model.Types.Primitive.U128> rpcResult = await rpcClient.GetDepositOf(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestReferendumCount()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeReferendumCount());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetReferendumCount(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetReferendumCount();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLowestUnbaked()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeLowestUnbaked());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLowestUnbaked(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetLowestUnbaked();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.EnumReferendumInfo GetTestValue15()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.EnumReferendumInfo result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.EnumReferendumInfo();
         result.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.ReferendumInfo>(), this.GetTestValue16());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.ReferendumStatus GetTestValue16()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.ReferendumStatus result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.ReferendumStatus();
         result.End = this.GetTestValueU32();
         result.Proposal = new HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded();
         result.Proposal.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.Bounded>(), this.GetTestValue17());
         result.Threshold = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold();
         result.Threshold.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.VoteThreshold>());
         result.Delay = this.GetTestValueU32();
         result.Tally = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Tally();
         result.Tally = this.GetTestValue18();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue17()
      {
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new HelloKusama.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Tally GetTestValue18()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Tally result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Tally();
         result.Ayes = this.GetTestValueU128();
         result.Nays = this.GetTestValueU128();
         result.Turnout = this.GetTestValueU128();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestReferendumInfoOf()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.EnumReferendumInfo mockupValue = this.GetTestValue15();
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupKey = this.GetTestValueU32();

         Assert.IsTrue(await rpcClient.SubscribeReferendumInfoOf(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetReferendumInfoOf(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.EnumReferendumInfo rpcResult = await rpcClient.GetReferendumInfoOf(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumVoting GetTestValue20()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumVoting result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumVoting();
         result.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.Voting>(), this.GetTestValue21());
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT11, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Delegations, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.PriorLock> GetTestValue21()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT11, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Delegations, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.PriorLock> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT11, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Delegations, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.PriorLock>();
         result.Create(this.GetTestValue22(), this.GetTestValue27(), this.GetTestValue28());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT11 GetTestValue22()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT11 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT11();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote>>();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote>[] {
                  this.GetTestValue23()});
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote> GetTestValue23()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote>();
         result.Create(this.GetTestValueU32(), this.GetTestValue24());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote GetTestValue24()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumAccountVote();
         result.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.AccountVote>(), this.GetTestValue25());
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.Vote, Ajuna.NetApi.Model.Types.Primitive.U128> GetTestValue25()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.Vote, Ajuna.NetApi.Model.Types.Primitive.U128> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.Vote, Ajuna.NetApi.Model.Types.Primitive.U128>();
         result.Create(this.GetTestValue26(), this.GetTestValueU128());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.Vote GetTestValue26()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.Vote result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.Vote();
         result.Value = this.GetTestValueU8();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Delegations GetTestValue27()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Delegations result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.types.Delegations();
         result.Votes = this.GetTestValueU128();
         result.Capital = this.GetTestValueU128();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.PriorLock GetTestValue28()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.PriorLock result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.PriorLock();
         result.BlockNumber = this.GetTestValueU32();
         result.Balance = this.GetTestValueU128();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue29()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestVotingOf()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumVoting mockupValue = this.GetTestValue20();
         HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 mockupKey = this.GetTestValue29();

         Assert.IsTrue(await rpcClient.SubscribeVotingOf(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetVotingOf(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote.EnumVoting rpcResult = await rpcClient.GetVotingOf(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      [Test()]
      public async System.Threading.Tasks.Task TestLastTabledWasExternal()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();


         Assert.IsTrue(await rpcClient.SubscribeLastTabledWasExternal());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetLastTabledWasExternal(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetLastTabledWasExternal();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold> GetTestValue32()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold>();
         result.Create(this.GetTestValue33(), this.GetTestValue35());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded GetTestValue33()
      {
         HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded result;
         result = new HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded();
         result.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.Bounded>(), this.GetTestValue34());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue34()
      {
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new HelloKusama.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold GetTestValue35()
      {
         HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold result;
         result = new HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold();
         result.Create(this.GetTestValueEnum<HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.VoteThreshold>());
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestNextExternal()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold> mockupValue = this.GetTestValue32();


         Assert.IsTrue(await rpcClient.SubscribeNextExternal());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetNextExternal(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.frame_support.traits.preimages.EnumBounded, HelloKusama.NetApiExt.Generated.Model.pallet_democracy.vote_threshold.EnumVoteThreshold> rpcResult = await rpcClient.GetNextExternal();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10> GetTestValue37()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10>();
         result.Create(this.GetTestValueU32(), this.GetTestValue38());
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10 GetTestValue38()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10();
         result.Value = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>();
         result.Value.Create(new HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32[] {
                  this.GetTestValue39()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 GetTestValue39()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue40()
      {
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new HelloKusama.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestBlacklist()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10> mockupValue = this.GetTestValue37();
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 mockupKey = this.GetTestValue40();

         Assert.IsTrue(await rpcClient.SubscribeBlacklist(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetBlacklist(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.sp_core.bounded.bounded_vec.BoundedVecT10> rpcResult = await rpcClient.GetBlacklist(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue42()
      {
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new HelloKusama.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCancellations()
      {
         // Construct new Mockup client to test with.
         DemocracyControllerMockupClient mockupClient = new DemocracyControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         DemocracyControllerClient rpcClient = new DemocracyControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.Bool mockupValue = this.GetTestValueBool();
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 mockupKey = this.GetTestValue42();

         Assert.IsTrue(await rpcClient.SubscribeCancellations(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCancellations(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.Bool rpcResult = await rpcClient.GetCancellations(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
