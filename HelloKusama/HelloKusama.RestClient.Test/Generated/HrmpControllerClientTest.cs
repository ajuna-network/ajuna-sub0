//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HelloKusama.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using HelloKusama.RestClient.Mockup.Generated.Clients;
   using HelloKusama.RestClient.Generated.Clients;
   using HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp;
   using Ajuna.NetApi.Model.Types.Base;
   using HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives;
   using Ajuna.NetApi.Model.Types.Primitive;
   using HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives;
   
   public class HrmpControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest GetTestValue2()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest();
         result.Confirmed = this.GetTestValueBool();
         result.Age = this.GetTestValueU32();
         result.SenderDeposit = this.GetTestValueU128();
         result.MaxMessageSize = this.GetTestValueU32();
         result.MaxCapacity = this.GetTestValueU32();
         result.MaxTotalSize = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId GetTestValue3()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId();
         result.Sender = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Sender = this.GetTestValue4();
         result.Recipient = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Recipient = this.GetTestValue5();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue4()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue5()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpOpenChannelRequests()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest mockupValue = this.GetTestValue2();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId mockupKey = this.GetTestValue3();

         Assert.IsTrue(await rpcClient.SubscribeHrmpOpenChannelRequests(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpOpenChannelRequests(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpOpenChannelRequest rpcResult = await rpcClient.GetHrmpOpenChannelRequests(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> GetTestValue7()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId[] {
                  this.GetTestValue8()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId GetTestValue8()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId();
         result.Sender = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Sender = this.GetTestValue9();
         result.Recipient = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Recipient = this.GetTestValue10();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue9()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue10()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpOpenChannelRequestsList()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> mockupValue = this.GetTestValue7();


         Assert.IsTrue(await rpcClient.SubscribeHrmpOpenChannelRequestsList());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpOpenChannelRequestsList(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> rpcResult = await rpcClient.GetHrmpOpenChannelRequestsList();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue12()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpOpenChannelRequestCount()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id mockupKey = this.GetTestValue12();

         Assert.IsTrue(await rpcClient.SubscribeHrmpOpenChannelRequestCount(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpOpenChannelRequestCount(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetHrmpOpenChannelRequestCount(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue14()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpAcceptedChannelRequestCount()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id mockupKey = this.GetTestValue14();

         Assert.IsTrue(await rpcClient.SubscribeHrmpAcceptedChannelRequestCount(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpAcceptedChannelRequestCount(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetHrmpAcceptedChannelRequestCount(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple GetTestValue16()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId GetTestValue17()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId();
         result.Sender = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Sender = this.GetTestValue18();
         result.Recipient = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Recipient = this.GetTestValue19();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue18()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue19()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpCloseChannelRequests()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseTuple mockupValue = this.GetTestValue16();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId mockupKey = this.GetTestValue17();

         Assert.IsTrue(await rpcClient.SubscribeHrmpCloseChannelRequests(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpCloseChannelRequests(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseTuple rpcResult = await rpcClient.GetHrmpCloseChannelRequests(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> GetTestValue21()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId[] {
                  this.GetTestValue22()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId GetTestValue22()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId();
         result.Sender = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Sender = this.GetTestValue23();
         result.Recipient = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Recipient = this.GetTestValue24();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue23()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue24()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpCloseChannelRequestsList()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> mockupValue = this.GetTestValue21();


         Assert.IsTrue(await rpcClient.SubscribeHrmpCloseChannelRequestsList());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpCloseChannelRequestsList(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId> rpcResult = await rpcClient.GetHrmpCloseChannelRequestsList();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue26()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpWatermarks()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id mockupKey = this.GetTestValue26();

         Assert.IsTrue(await rpcClient.SubscribeHrmpWatermarks(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpWatermarks(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetHrmpWatermarks(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel GetTestValue28()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel();
         result.MaxCapacity = this.GetTestValueU32();
         result.MaxTotalSize = this.GetTestValueU32();
         result.MaxMessageSize = this.GetTestValueU32();
         result.MsgCount = this.GetTestValueU32();
         result.TotalSize = this.GetTestValueU32();
         result.MqcHead = new Ajuna.NetApi.Model.Types.Base.BaseOpt<HelloKusama.NetApiExt.Generated.Model.primitive_types.H256>();
         result.MqcHead.Create(this.GetTestValue29());
         result.SenderDeposit = this.GetTestValueU128();
         result.RecipientDeposit = this.GetTestValueU128();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 GetTestValue29()
      {
         HelloKusama.NetApiExt.Generated.Model.primitive_types.H256 result;
         result = new HelloKusama.NetApiExt.Generated.Model.primitive_types.H256();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId GetTestValue30()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId();
         result.Sender = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Sender = this.GetTestValue31();
         result.Recipient = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Recipient = this.GetTestValue32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue31()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue32()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpChannels()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel mockupValue = this.GetTestValue28();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId mockupKey = this.GetTestValue30();

         Assert.IsTrue(await rpcClient.SubscribeHrmpChannels(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpChannels(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.hrmp.HrmpChannel rpcResult = await rpcClient.GetHrmpChannels(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> GetTestValue34()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id[] {
                  this.GetTestValue35()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue35()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue36()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpIngressChannelsIndex()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> mockupValue = this.GetTestValue34();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id mockupKey = this.GetTestValue36();

         Assert.IsTrue(await rpcClient.SubscribeHrmpIngressChannelsIndex(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpIngressChannelsIndex(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> rpcResult = await rpcClient.GetHrmpIngressChannelsIndex(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> GetTestValue38()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id[] {
                  this.GetTestValue39()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue39()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue40()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpEgressChannelsIndex()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> mockupValue = this.GetTestValue38();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id mockupKey = this.GetTestValue40();

         Assert.IsTrue(await rpcClient.SubscribeHrmpEgressChannelsIndex(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpEgressChannelsIndex(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> rpcResult = await rpcClient.GetHrmpEgressChannelsIndex(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage> GetTestValue42()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage[] {
                  this.GetTestValue43()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage GetTestValue43()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage();
         result.SentAt = this.GetTestValueU32();
         result.Data = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U8>();
         result.Data.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId GetTestValue44()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId();
         result.Sender = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Sender = this.GetTestValue45();
         result.Recipient = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Recipient = this.GetTestValue46();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue45()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue46()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpChannelContents()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage> mockupValue = this.GetTestValue42();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.HrmpChannelId mockupKey = this.GetTestValue44();

         Assert.IsTrue(await rpcClient.SubscribeHrmpChannelContents(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpChannelContents(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.InboundHrmpMessage> rpcResult = await rpcClient.GetHrmpChannelContents(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>>> GetTestValue48()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>>> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>>>();
         result.Create(new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>>[] {
                  this.GetTestValue49()});
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>> GetTestValue49()
      {
         Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>>();
         result.Create(this.GetTestValueU32(), this.GetTestValue50());
         return result;
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> GetTestValue50()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id[] {
                  this.GetTestValue51()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue51()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id GetTestValue52()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestHrmpChannelDigests()
      {
         // Construct new Mockup client to test with.
         HrmpControllerMockupClient mockupClient = new HrmpControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         HrmpControllerClient rpcClient = new HrmpControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>>> mockupValue = this.GetTestValue48();
         HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id mockupKey = this.GetTestValue52();

         Assert.IsTrue(await rpcClient.SubscribeHrmpChannelDigests(mockupKey));

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetHrmpChannelDigests(mockupValue, mockupKey);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>>> rpcResult = await rpcClient.GetHrmpChannelDigests(mockupKey);

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
