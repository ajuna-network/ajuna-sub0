//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HelloKusama.RestClient.Test.Generated
{
   using System;
   using NUnit.Framework;
   using System.Threading.Tasks;
   using System.Net.Http;
   using HelloKusama.RestClient.Mockup.Generated.Clients;
   using HelloKusama.RestClient.Generated.Clients;
   using Ajuna.NetApi.Model.Types.Primitive;
   using Ajuna.NetApi.Model.Types.Base;
   using HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2;
   using HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app;
   
   public class ParasSharedControllerClientTest : ClientTestBase
   {
      private System.Net.Http.HttpClient _httpClient;
      [SetUp()]
      public void Setup()
      {
         _httpClient = CreateHttpClient();
      }
      [Test()]
      public async System.Threading.Tasks.Task TestCurrentSessionIndex()
      {
         // Construct new Mockup client to test with.
         ParasSharedControllerMockupClient mockupClient = new ParasSharedControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParasSharedControllerClient rpcClient = new ParasSharedControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Primitive.U32 mockupValue = this.GetTestValueU32();


         Assert.IsTrue(await rpcClient.SubscribeCurrentSessionIndex());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetCurrentSessionIndex(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Primitive.U32 rpcResult = await rpcClient.GetCurrentSessionIndex();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex> GetTestValue3()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex[] {
                  this.GetTestValue4()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex GetTestValue4()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex();
         result.Value = this.GetTestValueU32();
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestActiveValidatorIndices()
      {
         // Construct new Mockup client to test with.
         ParasSharedControllerMockupClient mockupClient = new ParasSharedControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParasSharedControllerClient rpcClient = new ParasSharedControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex> mockupValue = this.GetTestValue3();


         Assert.IsTrue(await rpcClient.SubscribeActiveValidatorIndices());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetActiveValidatorIndices(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.ValidatorIndex> rpcResult = await rpcClient.GetActiveValidatorIndices();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
      public Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public> GetTestValue6()
      {
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public> result;
         result = new Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public>();
         result.Create(new HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public[] {
                  this.GetTestValue7()});
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public GetTestValue7()
      {
         HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public result;
         result = new HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public();
         result.Value = new HelloKusama.NetApiExt.Generated.Model.sp_core.sr25519.Public();
         result.Value = this.GetTestValue8();
         return result;
      }
      public HelloKusama.NetApiExt.Generated.Model.sp_core.sr25519.Public GetTestValue8()
      {
         HelloKusama.NetApiExt.Generated.Model.sp_core.sr25519.Public result;
         result = new HelloKusama.NetApiExt.Generated.Model.sp_core.sr25519.Public();
         result.Value = new HelloKusama.NetApiExt.Generated.Types.Base.Arr32U8();
         result.Value.Create(new Ajuna.NetApi.Model.Types.Primitive.U8[] {
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8(),
                  this.GetTestValueU8()});
         return result;
      }
      [Test()]
      public async System.Threading.Tasks.Task TestActiveValidatorKeys()
      {
         // Construct new Mockup client to test with.
         ParasSharedControllerMockupClient mockupClient = new ParasSharedControllerMockupClient(_httpClient);

         // Construct new subscription client to test with.
         var subscriptionClient = CreateSubscriptionClient();

         // Construct new RPC client to test with.
         ParasSharedControllerClient rpcClient = new ParasSharedControllerClient(_httpClient, subscriptionClient);
         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public> mockupValue = this.GetTestValue6();


         Assert.IsTrue(await rpcClient.SubscribeActiveValidatorKeys());

         // Save the previously generated mockup value in RPC service storage.
         bool mockupSetResult = await mockupClient.SetActiveValidatorKeys(mockupValue);

         // Test that the expected mockup value was handled successfully from RPC service.
         Assert.IsTrue(mockupSetResult);
         var cts = new System.Threading.CancellationTokenSource(TimeSpan.FromSeconds(1));
         Assert.IsTrue(await subscriptionClient.ReceiveNextAsync(cts.Token));

         Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.validator_app.Public> rpcResult = await rpcClient.GetActiveValidatorKeys();

         // Test that the expected mockup value matches the actual result from RPC service.
         Assert.AreEqual(mockupValue.Encode(), rpcResult.Encode());
      }
   }
}
