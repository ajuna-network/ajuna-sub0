//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HelloKusama.RestClient.Generated.Clients
{
   using System;
   using System.Threading.Tasks;
   using System.Net.Http;
   using Ajuna.NetApi.Model.Types.Base;
   using Ajuna.NetApi.Model.Types.Primitive;
   using HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives;
   using HelloKusama.RestClient.Generated.Interfaces;
   
   public sealed class UmpControllerClient : BaseClient, IUmpControllerClient
   {
      private HttpClient _httpClient;
      private BaseSubscriptionClient _subscriptionClient;
      public UmpControllerClient(HttpClient httpClient, BaseSubscriptionClient subscriptionClient)
      {
         _httpClient = httpClient;
         _subscriptionClient = subscriptionClient;
      }
      public async Task<BaseVec<BaseVec<U8>>> GetRelayDispatchQueues(Id key)
      {
         return await SendRequestAsync<BaseVec<BaseVec<U8>>>(_httpClient, "ump/relaydispatchqueues", HelloKusama.NetApiExt.Generated.Storage.UmpStorage.RelayDispatchQueuesParams(key));
      }
      public async Task<bool> SubscribeRelayDispatchQueues(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Ump.RelayDispatchQueues", HelloKusama.NetApiExt.Generated.Storage.UmpStorage.RelayDispatchQueuesParams(key));
      }
      public async Task<BaseTuple<U32, U32>> GetRelayDispatchQueueSize(Id key)
      {
         return await SendRequestAsync<BaseTuple<U32, U32>>(_httpClient, "ump/relaydispatchqueuesize", HelloKusama.NetApiExt.Generated.Storage.UmpStorage.RelayDispatchQueueSizeParams(key));
      }
      public async Task<bool> SubscribeRelayDispatchQueueSize(Id key)
      {
         return await _subscriptionClient.SubscribeAsync("Ump.RelayDispatchQueueSize", HelloKusama.NetApiExt.Generated.Storage.UmpStorage.RelayDispatchQueueSizeParams(key));
      }
      public async Task<BaseVec<Id>> GetNeedsDispatch()
      {
         return await SendRequestAsync<BaseVec<Id>>(_httpClient, "ump/needsdispatch");
      }
      public async Task<bool> SubscribeNeedsDispatch()
      {
         return await _subscriptionClient.SubscribeAsync("Ump.NeedsDispatch");
      }
      public async Task<Id> GetNextDispatchRoundStartWith()
      {
         return await SendRequestAsync<Id>(_httpClient, "ump/nextdispatchroundstartwith");
      }
      public async Task<bool> SubscribeNextDispatchRoundStartWith()
      {
         return await _subscriptionClient.SubscribeAsync("Ump.NextDispatchRoundStartWith");
      }
      public async Task<BaseTuple<Id, BaseVec<U8>>> GetOverweight(U64 key)
      {
         return await SendRequestAsync<BaseTuple<Id, BaseVec<U8>>>(_httpClient, "ump/overweight", HelloKusama.NetApiExt.Generated.Storage.UmpStorage.OverweightParams(key));
      }
      public async Task<bool> SubscribeOverweight(U64 key)
      {
         return await _subscriptionClient.SubscribeAsync("Ump.Overweight", HelloKusama.NetApiExt.Generated.Storage.UmpStorage.OverweightParams(key));
      }
      public async Task<U64> GetOverweightCount()
      {
         return await SendRequestAsync<U64>(_httpClient, "ump/overweightcount");
      }
      public async Task<bool> SubscribeOverweightCount()
      {
         return await _subscriptionClient.SubscribeAsync("Ump.OverweightCount");
      }
   }
}
