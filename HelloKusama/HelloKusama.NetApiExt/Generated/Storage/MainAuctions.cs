//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace HelloKusama.NetApiExt.Generated.Storage
{
    
    
    public sealed class AuctionsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public AuctionsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Auctions", "AuctionCounter"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Auctions", "AuctionInfo"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Auctions", "ReservedAmounts"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id>), typeof(Ajuna.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Auctions", "Winning"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(HelloKusama.NetApiExt.Generated.Types.Base.Arr36BaseOpt)));
        }
        
        /// <summary>
        /// >> AuctionCounterParams
        ///  Number of auctions started so far.
        /// </summary>
        public static string AuctionCounterParams()
        {
            return RequestGenerator.GetStorage("Auctions", "AuctionCounter", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuctionCounter
        ///  Number of auctions started so far.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> AuctionCounter(CancellationToken token)
        {
            string parameters = AuctionsStorage.AuctionCounterParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> AuctionInfoParams
        ///  Information relating to the current auction, if there is one.
        /// 
        ///  The first item in the tuple is the lease period index that the first of the four
        ///  contiguous lease periods on auction is for. The second is the block number when the
        ///  auction will "begin to end", i.e. the first block of the Ending Period of the auction.
        /// </summary>
        public static string AuctionInfoParams()
        {
            return RequestGenerator.GetStorage("Auctions", "AuctionInfo", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuctionInfo
        ///  Information relating to the current auction, if there is one.
        /// 
        ///  The first item in the tuple is the lease period index that the first of the four
        ///  contiguous lease periods on auction is for. The second is the block number when the
        ///  auction will "begin to end", i.e. the first block of the Ending Period of the auction.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>> AuctionInfo(CancellationToken token)
        {
            string parameters = AuctionsStorage.AuctionInfoParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, Ajuna.NetApi.Model.Types.Primitive.U32>>(parameters, token);
        }
        
        /// <summary>
        /// >> ReservedAmountsParams
        ///  Amounts currently reserved in the accounts of the bidders currently winning
        ///  (sub-)ranges.
        /// </summary>
        public static string ReservedAmountsParams(Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> key)
        {
            return RequestGenerator.GetStorage("Auctions", "ReservedAmounts", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReservedAmounts
        ///  Amounts currently reserved in the accounts of the bidders currently winning
        ///  (sub-)ranges.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U128> ReservedAmounts(Ajuna.NetApi.Model.Types.Base.BaseTuple<HelloKusama.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> key, CancellationToken token)
        {
            string parameters = AuctionsStorage.ReservedAmountsParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U128>(parameters, token);
        }
        
        /// <summary>
        /// >> WinningParams
        ///  The winning bids for each of the 10 ranges at each sample in the final Ending Period of
        ///  the current auction. The map's key is the 0-based index into the Sample Size. The
        ///  first sample of the ending period is 0; the last is `Sample Size - 1`.
        /// </summary>
        public static string WinningParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Auctions", "Winning", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> Winning
        ///  The winning bids for each of the 10 ranges at each sample in the final Ending Period of
        ///  the current auction. The map's key is the 0-based index into the Sample Size. The
        ///  first sample of the ending period is 0; the last is `Sample Size - 1`.
        /// </summary>
        public async Task<HelloKusama.NetApiExt.Generated.Types.Base.Arr36BaseOpt> Winning(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = AuctionsStorage.WinningParams(key);
            return await _client.GetStorageAsync<HelloKusama.NetApiExt.Generated.Types.Base.Arr36BaseOpt>(parameters, token);
        }
    }
    
    public sealed class AuctionsCalls
    {
        
        /// <summary>
        /// >> new_auction
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method NewAuction(Ajuna.NetApi.Model.Types.Base.BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> duration, Ajuna.NetApi.Model.Types.Base.BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> lease_period_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(duration.Encode());
            byteArray.AddRange(lease_period_index.Encode());
            return new Method(72, "Auctions", 0, "new_auction", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> bid
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Bid(Ajuna.NetApi.Model.Types.Base.BaseCom<HelloKusama.NetApiExt.Generated.Model.polkadot_parachain.primitives.Id> para, Ajuna.NetApi.Model.Types.Base.BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> auction_index, Ajuna.NetApi.Model.Types.Base.BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> first_slot, Ajuna.NetApi.Model.Types.Base.BaseCom<Ajuna.NetApi.Model.Types.Primitive.U32> last_slot, Ajuna.NetApi.Model.Types.Base.BaseCom<Ajuna.NetApi.Model.Types.Primitive.U128> amount)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(para.Encode());
            byteArray.AddRange(auction_index.Encode());
            byteArray.AddRange(first_slot.Encode());
            byteArray.AddRange(last_slot.Encode());
            byteArray.AddRange(amount.Encode());
            return new Method(72, "Auctions", 1, "bid", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_auction
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method CancelAuction()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(72, "Auctions", 2, "cancel_auction", byteArray.ToArray());
        }
    }
    
    public enum AuctionsErrors
    {
        
        /// <summary>
        /// >> AuctionInProgress
        /// This auction is already in progress.
        /// </summary>
        AuctionInProgress,
        
        /// <summary>
        /// >> LeasePeriodInPast
        /// The lease period is in the past.
        /// </summary>
        LeasePeriodInPast,
        
        /// <summary>
        /// >> ParaNotRegistered
        /// Para is not registered
        /// </summary>
        ParaNotRegistered,
        
        /// <summary>
        /// >> NotCurrentAuction
        /// Not a current auction.
        /// </summary>
        NotCurrentAuction,
        
        /// <summary>
        /// >> NotAuction
        /// Not an auction.
        /// </summary>
        NotAuction,
        
        /// <summary>
        /// >> AuctionEnded
        /// Auction has already ended.
        /// </summary>
        AuctionEnded,
        
        /// <summary>
        /// >> AlreadyLeasedOut
        /// The para is already leased out for part of this range.
        /// </summary>
        AlreadyLeasedOut,
    }
}
