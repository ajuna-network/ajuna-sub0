//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace HelloKusama.NetApiExt.Generated.Storage
{
    
    
    public sealed class InitializerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public InitializerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Initializer", "HasInitialized"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Initializer", "BufferedSessionChanges"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>)));
        }
        
        /// <summary>
        /// >> HasInitializedParams
        ///  Whether the parachains modules have been initialized within this block.
        /// 
        ///  Semantically a `bool`, but this guarantees it should never hit the trie,
        ///  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.
        /// 
        ///  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of
        ///  them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for
        ///  the semantics of this variable.
        /// </summary>
        public static string HasInitializedParams()
        {
            return RequestGenerator.GetStorage("Initializer", "HasInitialized", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> HasInitialized
        ///  Whether the parachains modules have been initialized within this block.
        /// 
        ///  Semantically a `bool`, but this guarantees it should never hit the trie,
        ///  as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.
        /// 
        ///  As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of
        ///  them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for
        ///  the semantics of this variable.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseTuple> HasInitialized(CancellationToken token)
        {
            string parameters = InitializerStorage.HasInitializedParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseTuple>(parameters, token);
        }
        
        /// <summary>
        /// >> BufferedSessionChangesParams
        ///  Buffered session changes along with the block number at which they should be applied.
        /// 
        ///  Typically this will be empty or one element long. Apart from that this item never hits
        ///  the storage.
        /// 
        ///  However this is a `Vec` regardless to handle various edge cases that may occur at runtime
        ///  upgrade boundaries or if governance intervenes.
        /// </summary>
        public static string BufferedSessionChangesParams()
        {
            return RequestGenerator.GetStorage("Initializer", "BufferedSessionChanges", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BufferedSessionChanges
        ///  Buffered session changes along with the block number at which they should be applied.
        /// 
        ///  Typically this will be empty or one element long. Apart from that this item never hits
        ///  the storage.
        /// 
        ///  However this is a `Vec` regardless to handle various edge cases that may occur at runtime
        ///  upgrade boundaries or if governance intervenes.
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>> BufferedSessionChanges(CancellationToken token)
        {
            string parameters = InitializerStorage.BufferedSessionChangesParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Base.BaseVec<HelloKusama.NetApiExt.Generated.Model.polkadot_runtime_parachains.initializer.BufferedSessionChange>>(parameters, token);
        }
    }
    
    public sealed class InitializerCalls
    {
        
        /// <summary>
        /// >> force_approve
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method ForceApprove(Ajuna.NetApi.Model.Types.Primitive.U32 up_to)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(up_to.Encode());
            return new Method(57, "Initializer", 0, "force_approve", byteArray.ToArray());
        }
    }
}
