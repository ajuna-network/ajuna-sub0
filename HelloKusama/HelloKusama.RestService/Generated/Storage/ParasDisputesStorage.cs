//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Types.Base;
using Ajuna.ServiceLayer.Attributes;
using Ajuna.ServiceLayer.Storage;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace HelloKusama.RestService.Generated.Storage
{
    
    
    /// <summary>
    /// IParasDisputesStorage interface definition.
    /// </summary>
    public interface IParasDisputesStorage : IStorage
    {
        
        /// <summary>
        /// >> LastPrunedSession
        ///  The last pruned session, if any. All data stored by this module
        ///  references sessions.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetLastPrunedSession();
        
        /// <summary>
        /// >> Disputes
        ///  All ongoing or concluded disputes for the last several sessions.
        /// </summary>
        HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState GetDisputes(string key);
        
        /// <summary>
        /// >> Included
        ///  All included blocks on the chain, as well as the block number in this chain that
        ///  should be reverted back to if the candidate is disputed and determined to be invalid.
        /// </summary>
        Ajuna.NetApi.Model.Types.Primitive.U32 GetIncluded(string key);
        
        /// <summary>
        /// >> SpamSlots
        ///  Maps session indices to a vector indicating the number of potentially-spam disputes
        ///  each validator is participating in. Potentially-spam disputes are remote disputes which have
        ///  fewer than `byzantine_threshold + 1` validators.
        /// 
        ///  The i'th entry of the vector corresponds to the i'th validator in the session.
        /// </summary>
        Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32> GetSpamSlots(string key);
        
        /// <summary>
        /// >> Frozen
        ///  Whether the chain is frozen. Starts as `None`. When this is `Some`,
        ///  the chain will not accept any new parachain blocks for backing or inclusion,
        ///  and its value indicates the last valid block number in the chain.
        ///  It can only be set back to `None` by governance intervention.
        /// </summary>
        Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32> GetFrozen();
    }
    
    /// <summary>
    /// ParasDisputesStorage class definition.
    /// </summary>
    public sealed class ParasDisputesStorage : IParasDisputesStorage
    {
        
        /// <summary>
        /// _lastPrunedSessionTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _lastPrunedSessionTypedStorage;
        
        /// <summary>
        /// _disputesTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState> _disputesTypedStorage;
        
        /// <summary>
        /// _includedTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> _includedTypedStorage;
        
        /// <summary>
        /// _spamSlotsTypedStorage typed storage field
        /// </summary>
        private TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>> _spamSlotsTypedStorage;
        
        /// <summary>
        /// _frozenTypedStorage typed storage field
        /// </summary>
        private TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>> _frozenTypedStorage;
        
        /// <summary>
        /// ParasDisputesStorage constructor.
        /// </summary>
        public ParasDisputesStorage(IStorageDataProvider storageDataProvider, List<IStorageChangeDelegate> storageChangeDelegates)
        {
            this.LastPrunedSessionTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("ParasDisputes.LastPrunedSession", storageDataProvider, storageChangeDelegates);
            this.DisputesTypedStorage = new TypedMapStorage<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState>("ParasDisputes.Disputes", storageDataProvider, storageChangeDelegates);
            this.IncludedTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32>("ParasDisputes.Included", storageDataProvider, storageChangeDelegates);
            this.SpamSlotsTypedStorage = new TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>>("ParasDisputes.SpamSlots", storageDataProvider, storageChangeDelegates);
            this.FrozenTypedStorage = new TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>>("ParasDisputes.Frozen", storageDataProvider, storageChangeDelegates);
        }
        
        /// <summary>
        /// _lastPrunedSessionTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Primitive.U32> LastPrunedSessionTypedStorage
        {
            get
            {
                return _lastPrunedSessionTypedStorage;
            }
            set
            {
                _lastPrunedSessionTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _disputesTypedStorage property
        /// </summary>
        public TypedMapStorage<HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState> DisputesTypedStorage
        {
            get
            {
                return _disputesTypedStorage;
            }
            set
            {
                _disputesTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _includedTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Primitive.U32> IncludedTypedStorage
        {
            get
            {
                return _includedTypedStorage;
            }
            set
            {
                _includedTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _spamSlotsTypedStorage property
        /// </summary>
        public TypedMapStorage<Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>> SpamSlotsTypedStorage
        {
            get
            {
                return _spamSlotsTypedStorage;
            }
            set
            {
                _spamSlotsTypedStorage = value;
            }
        }
        
        /// <summary>
        /// _frozenTypedStorage property
        /// </summary>
        public TypedStorage<Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>> FrozenTypedStorage
        {
            get
            {
                return _frozenTypedStorage;
            }
            set
            {
                _frozenTypedStorage = value;
            }
        }
        
        /// <summary>
        /// Connects to all storages and initializes the change subscription handling.
        /// </summary>
        public async Task InitializeAsync(Ajuna.ServiceLayer.Storage.IStorageDataProvider dataProvider)
        {
            await LastPrunedSessionTypedStorage.InitializeAsync("ParasDisputes", "LastPrunedSession");
            await DisputesTypedStorage.InitializeAsync("ParasDisputes", "Disputes");
            await IncludedTypedStorage.InitializeAsync("ParasDisputes", "Included");
            await SpamSlotsTypedStorage.InitializeAsync("ParasDisputes", "SpamSlots");
            await FrozenTypedStorage.InitializeAsync("ParasDisputes", "Frozen");
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.LastPrunedSession
        /// </summary>
        [StorageChange("ParasDisputes", "LastPrunedSession")]
        public void OnUpdateLastPrunedSession(string data)
        {
            LastPrunedSessionTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> LastPrunedSession
        ///  The last pruned session, if any. All data stored by this module
        ///  references sessions.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetLastPrunedSession()
        {
            return LastPrunedSessionTypedStorage.Get();
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.Disputes
        /// </summary>
        [StorageChange("ParasDisputes", "Disputes")]
        public void OnUpdateDisputes(string key, string data)
        {
            DisputesTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Disputes
        ///  All ongoing or concluded disputes for the last several sessions.
        /// </summary>
        public HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState GetDisputes(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (DisputesTypedStorage.Dictionary.TryGetValue(key, out HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.Included
        /// </summary>
        [StorageChange("ParasDisputes", "Included")]
        public void OnUpdateIncluded(string key, string data)
        {
            IncludedTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> Included
        ///  All included blocks on the chain, as well as the block number in this chain that
        ///  should be reverted back to if the candidate is disputed and determined to be invalid.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Primitive.U32 GetIncluded(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (IncludedTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Primitive.U32 result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.SpamSlots
        /// </summary>
        [StorageChange("ParasDisputes", "SpamSlots")]
        public void OnUpdateSpamSlots(string key, string data)
        {
            SpamSlotsTypedStorage.Update(key, data);
        }
        
        /// <summary>
        /// >> SpamSlots
        ///  Maps session indices to a vector indicating the number of potentially-spam disputes
        ///  each validator is participating in. Potentially-spam disputes are remote disputes which have
        ///  fewer than `byzantine_threshold + 1` validators.
        /// 
        ///  The i'th entry of the vector corresponds to the i'th validator in the session.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32> GetSpamSlots(string key)
        {
            if ((key == null))
            {
                return null;
            }
            if (SpamSlotsTypedStorage.Dictionary.TryGetValue(key, out Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32> result))
            {
                return result;
            }
            else
            {
                return null;
            }
        }
        
        /// <summary>
        /// Implements any storage change for ParasDisputes.Frozen
        /// </summary>
        [StorageChange("ParasDisputes", "Frozen")]
        public void OnUpdateFrozen(string data)
        {
            FrozenTypedStorage.Update(data);
        }
        
        /// <summary>
        /// >> Frozen
        ///  Whether the chain is frozen. Starts as `None`. When this is `Some`,
        ///  the chain will not accept any new parachain blocks for backing or inclusion,
        ///  and its value indicates the last valid block number in the chain.
        ///  It can only be set back to `None` by governance intervention.
        /// </summary>
        public Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32> GetFrozen()
        {
            return FrozenTypedStorage.Get();
        }
    }
}
