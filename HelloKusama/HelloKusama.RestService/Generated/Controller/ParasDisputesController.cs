//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi.Model.Types.Base;
using Ajuna.ServiceLayer.Attributes;
using HelloKusama.RestService.Generated.Storage;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace HelloKusama.RestService.Generated.Controller
{
    
    
    /// <summary>
    /// ParasDisputesController controller to access storages.
    /// </summary>
    [ApiController()]
    [Route("[controller]")]
    public sealed class ParasDisputesController : ControllerBase
    {
        
        private IParasDisputesStorage _parasDisputesStorage;
        
        /// <summary>
        /// ParasDisputesController constructor.
        /// </summary>
        public ParasDisputesController(IParasDisputesStorage parasDisputesStorage)
        {
            _parasDisputesStorage = parasDisputesStorage;
        }
        
        /// <summary>
        /// >> LastPrunedSession
        ///  The last pruned session, if any. All data stored by this module
        ///  references sessions.
        /// </summary>
        [HttpGet("LastPrunedSession")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(HelloKusama.NetApiExt.Generated.Storage.ParasDisputesStorage), "LastPrunedSessionParams")]
        public IActionResult GetLastPrunedSession()
        {
            return this.Ok(_parasDisputesStorage.GetLastPrunedSession());
        }
        
        /// <summary>
        /// >> Disputes
        ///  All ongoing or concluded disputes for the last several sessions.
        /// </summary>
        [HttpGet("Disputes")]
        [ProducesResponseType(typeof(HelloKusama.NetApiExt.Generated.Model.polkadot_primitives.v2.DisputeState), 200)]
        [StorageKeyBuilder(typeof(HelloKusama.NetApiExt.Generated.Storage.ParasDisputesStorage), "DisputesParams", typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash>))]
        public IActionResult GetDisputes(string key)
        {
            return this.Ok(_parasDisputesStorage.GetDisputes(key));
        }
        
        /// <summary>
        /// >> Included
        ///  All included blocks on the chain, as well as the block number in this chain that
        ///  should be reverted back to if the candidate is disputed and determined to be invalid.
        /// </summary>
        [HttpGet("Included")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Primitive.U32), 200)]
        [StorageKeyBuilder(typeof(HelloKusama.NetApiExt.Generated.Storage.ParasDisputesStorage), "IncludedParams", typeof(Ajuna.NetApi.Model.Types.Base.BaseTuple<Ajuna.NetApi.Model.Types.Primitive.U32, HelloKusama.NetApiExt.Generated.Model.polkadot_core_primitives.CandidateHash>))]
        public IActionResult GetIncluded(string key)
        {
            return this.Ok(_parasDisputesStorage.GetIncluded(key));
        }
        
        /// <summary>
        /// >> SpamSlots
        ///  Maps session indices to a vector indicating the number of potentially-spam disputes
        ///  each validator is participating in. Potentially-spam disputes are remote disputes which have
        ///  fewer than `byzantine_threshold + 1` validators.
        /// 
        ///  The i'th entry of the vector corresponds to the i'th validator in the session.
        /// </summary>
        [HttpGet("SpamSlots")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Base.BaseVec<Ajuna.NetApi.Model.Types.Primitive.U32>), 200)]
        [StorageKeyBuilder(typeof(HelloKusama.NetApiExt.Generated.Storage.ParasDisputesStorage), "SpamSlotsParams", typeof(Ajuna.NetApi.Model.Types.Primitive.U32))]
        public IActionResult GetSpamSlots(string key)
        {
            return this.Ok(_parasDisputesStorage.GetSpamSlots(key));
        }
        
        /// <summary>
        /// >> Frozen
        ///  Whether the chain is frozen. Starts as `None`. When this is `Some`,
        ///  the chain will not accept any new parachain blocks for backing or inclusion,
        ///  and its value indicates the last valid block number in the chain.
        ///  It can only be set back to `None` by governance intervention.
        /// </summary>
        [HttpGet("Frozen")]
        [ProducesResponseType(typeof(Ajuna.NetApi.Model.Types.Base.BaseOpt<Ajuna.NetApi.Model.Types.Primitive.U32>), 200)]
        [StorageKeyBuilder(typeof(HelloKusama.NetApiExt.Generated.Storage.ParasDisputesStorage), "FrozenParams")]
        public IActionResult GetFrozen()
        {
            return this.Ok(_parasDisputesStorage.GetFrozen());
        }
    }
}
